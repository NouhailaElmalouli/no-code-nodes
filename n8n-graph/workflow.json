{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [0, 0],
      "id": "9ed28929-6a29-4fef-972e-6b3f54e81385",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cityweft.com/v1/context",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer aec-tech-barcelona-2025"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"polygon\": [\n    [51.5074, -0.1278],\n    [51.5075, -0.1279],\n    [51.5076, -0.1280],\n    [51.5074, -0.1278]\n  ],\n  \"settings\": {\n      \"defaultRoofType\": \"flat\",\n      \"defaultLevels\": 2,\n      \"defaultLevelHeight\": 4,\n      \"topographyModel\": false\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [300, 0],
      "id": "f4c90b15-f178-4f2d-89cc-38e0025ba5c5",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "const descriptors = $input.all();\n\n// Helper values\nlet total = descriptors.length;\nlet totalHeight = 0;\nlet heights = [];\nlet minHeight = Infinity;\nlet maxHeight = -Infinity;\n\nconst levelCounts = {};\nconst facadeCounts = {};\n\ndescriptors.forEach(d => {\n  const desc = d.json;\n\n  // Building height stats\n  const height = desc.buildingHeight ?? 0;\n  heights.push(height);\n  totalHeight += height;\n  minHeight = Math.min(minHeight, height);\n  maxHeight = Math.max(maxHeight, height);\n\n  // Building levels distribution\n  const levels = desc.buildingLevels ?? 'unknown';\n  levelCounts[levels] = (levelCounts[levels] || 0) + 1;\n\n  // Facade material distribution\n  const material = desc.buildingFacadeMaterial ?? 'unknown';\n  facadeCounts[material] = (facadeCounts[material] || 0) + 1;\n});\n\n// Final result\nconst averageHeight = total > 0 ? totalHeight / total : 0;\n\nreturn [\n  {\n    json: {\n      totalBuildings: total,\n      averageBuildingHeight: averageHeight,\n      minBuildingHeight: minHeight,\n      maxBuildingHeight: maxHeight,\n      buildingLevelsDistribution: levelCounts,\n      facadeMaterialDistribution: facadeCounts\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [840, -140],
      "id": "8d8e688c-43fc-451c-9848-0108d718a0d5",
      "name": "Aggregate Building Stats"
    },
    {
      "parameters": {
        "jsCode": "const inputItems = $input.all();\nconst descriptors = [];\n\ninputItems.forEach(item => {\n  const geometries = item.json.geometry;\n  \n  if (Array.isArray(geometries)) {\n    geometries.forEach(geom => {\n      if (geom.geometryType === 'meshes' && geom.type === 'buildings' && Array.isArray(geom.meshes)) {\n        geom.meshes.forEach(mesh => {\n          if (mesh.descriptor) {\n            descriptors.push({ json: mesh.descriptor });\n          }\n        });\n      }\n    });\n  }\n});\n\nreturn descriptors;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [540, -140],
      "id": "6d97e4ee-a857-4c1d-8d64-91d919ad6fc6",
      "name": "Get Building Data",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const inputItems = $input.all();\nconst descriptors = [];\n\ninputItems.forEach(item => {\n  const geometries = item.json.geometry;\n  \n  if (Array.isArray(geometries)) {\n    geometries.forEach(geom => {\n      if (geom.geometryType === 'meshes' && geom.type === 'surface' && Array.isArray(geom.meshes)) {\n        geom.meshes.forEach(mesh => {\n          if (mesh.descriptor) {\n            descriptors.push({ json: mesh.descriptor });\n          }\n        });\n      }\n    });\n  }\n});\n\nreturn descriptors;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [540, 100],
      "id": "062cff15-a592-458c-b170-093c91856a69",
      "name": "Get Surface Data",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const surfaces = $input.all();\n\nlet totalPaths = surfaces.length;\nlet totalWidth = 0;\nlet minWidth = Infinity;\nlet maxWidth = -Infinity;\n\nlet totalLanesForward = 0;\nlet totalLanesBackward = 0;\nlet markedCount = 0;\n\nconst pathTypeDist = {};\nconst pathMaterialDist = {};\nconst intersectionMaterialDist = {};\n\nsurfaces.forEach(s => {\n  const data = s.json;\n\n  // Width stats\n  const width = data.width ?? 0;\n  totalWidth += width;\n  minWidth = Math.min(minWidth, width);\n  maxWidth = Math.max(maxWidth, width);\n\n  // Lane counts\n  totalLanesForward += data.lanesForward ?? 0;\n  totalLanesBackward += data.lanesBackward ?? 0;\n\n  // Marked count\n  if (data.isRoadwayMarked) markedCount++;\n\n  // Path type distribution\n  const pathType = data.pathType ?? 'unknown';\n  pathTypeDist[pathType] = (pathTypeDist[pathType] || 0) + 1;\n\n  // Path material distribution\n  const pathMat = data.pathMaterial ?? 'unknown';\n  pathMaterialDist[pathMat] = (pathMaterialDist[pathMat] || 0) + 1;\n\n  // Intersection material distribution\n  const intMat = data.intersectionMaterial ?? 'unknown';\n  intersectionMaterialDist[intMat] = (intersectionMaterialDist[intMat] || 0) + 1;\n});\n\nconst avgWidth = totalPaths > 0 ? totalWidth / totalPaths : 0;\nconst markedRatio = totalPaths > 0 ? markedCount / totalPaths : 0;\n\nreturn [{\n  json: {\n    totalPaths,\n    averageWidth: avgWidth,\n    minWidth,\n    maxWidth,\n    totalLanesForward,\n    totalLanesBackward,\n    isRoadwayMarkedRatio: markedRatio,\n    pathTypeDistribution: pathTypeDist,\n    pathMaterialDistribution: pathMaterialDist,\n    intersectionMaterialDistribution: intersectionMaterialDist\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [840, 100],
      "id": "29fa26f9-288f-4514-b468-4daab365faa1",
      "name": "Aggregate Surface Stats"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst sentences = items.map(item => {\n  const data = item.json;\n  let buildingType = data.buildingType;\n  let buildingName = data.buildingName;\n\n  const hasType = buildingType && buildingType !== 'unknown';\n  const hasName = buildingName && buildingName !== 'unnamed';\n\n  let sentence = \"\";\n\n  if (hasType && hasName) {\n    sentence = `A ${buildingType} building named ${buildingName}.`;\n  } else if (hasType && !hasName) {\n    sentence = `A ${buildingType} building with no specific name.`;\n  } else if (!hasType && hasName) {\n    sentence = `A building named ${buildingName}.`; // Updated logic\n  } else {\n    sentence = \"A building with no specific name.\";\n  }\n\n  return { json: { sentence } };\n});\n\nreturn sentences;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, -360],
      "id": "77eaddf9-ca0d-4232-b954-92321e1c5ba5",
      "name": "Prepare Building Function Sentences",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://europe-southwest1-n8n-server-functions.cloudfunctions.net/get_category_scores",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ [$json]}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1300, -360],
      "id": "694b56ab-e642-43f7-b5db-bfee3f23cb3d",
      "name": "Get Classifications from GCP Function"
    },
    {
      "parameters": {
        "jsCode": "const facadeMaterials = $json.facadeMaterialDistribution || {};\nconst pathMaterials = $json.pathMaterialDistribution || {};\n\nreturn [{\n  json: {\n    prompt: `\nHere is the urban data:\n\n:office: Building Facade Material Distribution:\n${JSON.stringify(facadeMaterials, null, 2)}\n\n:motorway: Surface Path Material Distribution:\n${JSON.stringify(pathMaterials, null, 2)}\n\n:mag: Instructions:\nPlease identify the most common materials used in buildings and surfaces. If any material clearly appears more than others, state it as the majority. If the distribution is balanced or unknown, explain that too.\n\n:brain: Question:\nCan you summarize what this says about the majority of materials used in the area?\n    `.trim()\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1600, -20],
      "id": "7a30e23d-bb39-461b-9b20-f3400225070f",
      "name": "Build AI Prompt"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "GPT-4.1"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [1860, -20],
      "id": "6d82686f-5c72-4ed6-82ac-c48653e14182",
      "name": "OpenAI",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "fileName": "site-insights"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [1600, 160],
      "id": "2e42eb64-0a7c-43f8-a8df-8461db5458de",
      "name": "Convert to CSV"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fbiw2nq5ac.execute-api.eu-central-1.amazonaws.com/development-v1/api/run-analysis",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Infrared-Encoding",
              "value": "gzip"
            },
            {
              "name": "Content-Type",
              "value": "text/plain"
            },
            {
              "name": "x-api-key",
              "value": "AEPcDGeNCw4x6M97zfowL1dzNKkiagNJ7OzyftkO"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Data",
              "value": "SDRzSUFBQUFBQUFBQTlXUndZckNNQkNHN3o1RnlkbUJKbW1iMWxlUlBVd3pFd21zamJRQlY4UjNON2E0YTlrOXFQU3ljd2prbS8vL0dXYk9xeXlWd0E0L1Q0TWZJSjRPTERhWk9QcU93SWE5QzMwVTYwazBzdUhBVEVraHkwZEt2bWNiZmVoU1I5ODdPdzU3anIzblFXek9JeHF4VWhXWGhtdlFoVFJRdUlZQVNUc2dzc3F5ckpwYTE0K0cwV1JENk1sM0dHOWgyMW52VnZuNlRTUVhOQzZabGMvSXgxd2cwc3I1NitsTnFIZEgxWDlremVmNi9sMStwS0p5clZOS3B3TzdGcUZRV0VOcktBYzBhR1dyQ2pSNTgrcUJ5OStqUEllcUJZMUxacFgvN2NDcjZiMWNBZDFjSlNZeUJBQUE="
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [540, 580],
      "id": "b4b5afb2-082c-4358-a86a-891338f10542",
      "name": "HTTP Request1",
      "disabled": true
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [1280, 60],
      "id": "c7a59ff6-a627-4ee4-b789-d4106607dd6d",
      "name": "Merge1"
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "text": "={{ $json }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [2220, -20],
      "id": "13b646f0-470e-49d2-a0ec-0bdcca7e6289",
      "name": "Slack",
      "webhookId": "b70b3c3d-676f-464f-b28c-aef73b39ee3a",
      "credentials": {
        "slackApi": {
          "id": "U8EdrSKqN6npYkXa",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sdr8euc1.eu-central-1.shapediver.com/api/v2/ticket/d65c2a7ca4cedb844bba1b8d5807650f750794774c0b71ab0e78f5d3f14b8c31b65fd6fd32d590f7b669c9c430a84355f93728149dcb5178d711d7da1a0904a653ff3f0b2cce70651632fab7cae4a33953c812b4e99c50009afac398f2811f43ead6548cfa554f9f96e97ca300b12dd94b34e6b2d815f876-7a85f35a6a33157ad5bab4c12688d480",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [540, 300],
      "id": "946b2bbd-1ccf-4f92-9da4-3ddff07769c8",
      "name": "Open ShapeDiver"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sdr8euc1.eu-central-1.shapediver.com/api/v2/ticket/d65c2a7ca4cedb844bba1b8d5807650f750794774c0b71ab0e78f5d3f14b8c31b65fd6fd32d590f7b669c9c430a84355f93728149dcb5178d711d7da1a0904a653ff3f0b2cce70651632fab7cae4a33953c812b4e99c50009afac398f2811f43ead6548cfa554f9f96e97ca300b12dd94b34e6b2d815f876-7a85f35a6a33157ad5bab4c12688d480",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [840, 300],
      "id": "da64a158-1a4e-4979-b83b-08f508f669b4",
      "name": "Run Remote Grasshopper1"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nreturn items.slice(31,37)\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, -360],
      "id": "f5b1cd81-1c45-46ba-a8fb-48708a1f47be",
      "name": "Limit sentences",
      "alwaysOutputData": true
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Get Building Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Surface Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Open ShapeDiver",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Building Stats": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Building Data": {
      "main": [
        [
          {
            "node": "Aggregate Building Stats",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Building Function Sentences",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Surface Data": {
      "main": [
        [
          {
            "node": "Aggregate Surface Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Surface Stats": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Prepare Building Function Sentences": {
      "main": [
        [
          {
            "node": "Limit sentences",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build AI Prompt": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Convert to CSV",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build AI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open ShapeDiver": {
      "main": [
        [
          {
            "node": "Run Remote Grasshopper1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Remote Grasshopper1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Limit sentences": {
      "main": [
        [
          {
            "node": "Get Classifications from GCP Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "427f918f8971349a916961503472714c9a28f1a54162d4bfc9f89b934eb54cea"
  }
}
